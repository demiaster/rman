#! /usr/bin/python
import getpass
import time
# import the python functions
import sys,os.path,subprocess

# import the python renderman library
import prman

###-------------------------------Function Section--------------------------###

"""
Jon Macey's function
function to check if shader exists and compile it, we assume that the shader
is .osl and the compiled shader is .oso If the shader source is newer than the
compiled shader we will compile it. It also assumes that oslc is in the path.
"""
def checkAndCompileShader(shader) :
    shader = "shaders/" + shader
    if os.path.isfile(shader+'.oso') != True  or os.stat(shader+'.osl').st_mtime - os.stat(shader+'.oso').st_mtime > 0 :
        print "compiling shader %s" %(shader)
        try :
            subprocess.check_call(["oslc", shader+".osl"])
        except subprocess.CalledProcessError :
            sys.exit("shader compilation failed")

def checkAndCompileOldShader(shader) :
    shader = "shaders/" + shader
    if os.path.isfile(shader+'.slo') != True  or os.stat(shader+'.sl').st_mtime - os.stat(shader+'.slo').st_mtime > 0 :
        print "compiling old shader %s" %(shader)
        try :
            subprocess.check_call(["shader", shader+".sl"])
        except subprocess.CalledProcessError :
            sys.exit("shader compilation failed")

# cube shape for the room
def Room(width,height,depth) :
    w=width/2.0
    h=height/2.0
    d=depth/2.0
    ri.ArchiveRecord(ri.COMMENT, 'Cube Generated by Cube Function')
    ri.AttributeBegin()
    ri.Bxdf( "PxrDisney","bxdf", {
                                "color baseColor" : [0.6, 0.6, 0.9],
                                "float roughness" : [0.5],
                                "float specular" : [0]
                                })
    #rear
    face=[-w, -h, d, -w, h, d, w, -h, d, w, h, d]
    ri.Patch("bilinear",{'P':face})
    #front
    face=[-w, -h, -d, -w, h, -d, w, -h, -d, w, h, -d]
    ri.Patch("bilinear",{'P':face})
    #left
    face=[-w, -h, -d, -w, h, -d, -w, -h, d, -w, h, d]
    ri.Patch("bilinear",{'P':face})
    #right
    face=[w, -h, -d, w, h, -d, w, -h, d, w, h, d]
    ri.Patch("bilinear",{'P':face})
    #bottom
    face=[w, -h, d, w, -h, -d, -w, -h, d, -w, -h, -d]
    ri.Patch("bilinear",{'P':face})
    #top
    face=[w, h, d, w, h, -d, -w, h, d, -w, h, -d]
    ri.Patch("bilinear",{'P':face})
    ri.AttributeEnd()
    ri.ArchiveRecord(ri.COMMENT, '--End of Cube Function--')

# hyperboloid shapes in the pin
def hyperboloid_wrapper(height, base_radius, top_radius):
    ri.ArchiveRecord(ri.COMMENT, '--Hyperboloid Shape Generated by hyperboloid_wrapper Function--')
    ri.TransformBegin()
    ri.Rotate(-90, 1, 0, 0)
    p_base = [base_radius, 0, 0]
    p_top = [top_radius, 0, height]
    ri.Hyperboloid(p_base, p_top, 360)
    ri.TransformEnd()
    ri.ArchiveRecord(ri.COMMENT, '--!End of hyperboloid_wrapper Function!--')

# model pin
def Pin(color):
    ri.ArchiveRecord(ri.COMMENT, '--Pin Model Generated by Pin Function--')
    
    #-------------------metal part-------------------#
    # the pointy end
    baseColorMetal = [0.8, 0.8, 0.8]
    metallic = 1
    roughnessTip = 0.4
    roughnessStick = 0.1

    ri.TransformBegin()
    end_height = 0.35
    metal_radius = 0.06
    ri.Translate(0, end_height, 0)
    ri.TransformBegin()
    ri.AttributeBegin()
    ri.Rotate(90, 1, 0, 0)
    ri.Pattern("PxrBump","plasticBump",{
                                    "string filename" : "textures/scratch.tx",
                                    "float scale": 0.003,
                                    "int invertT" : 0
                                       })
    ri.Bxdf( "PxrDisney","bxdf", { 
                                  "color baseColor" : baseColorMetal    ,
                                  "float metallic": metallic,
                                  "float roughness": roughnessTip,
                                  "float specular" : [0.5],
                                  "reference normal bumpNormal" : ["plasticBump:resultN"]
                                 })
    ri.Cone(end_height, metal_radius, 360)
    ri.AttributeEnd()
    ri.TransformEnd()

    #the metal stick
    metal_height = 0.9
    ri.TransformBegin()
    ri.AttributeBegin()
    ri.Rotate(-90, 1, 0, 0)
    ri.Pattern("PxrOSL", "metal",{
                                  "string shader" : "shaders/metal",
                                 })

    ri.Pattern("PxrOSL", "envmap", {
                                    "string shader"  : "shaders/envmap",
                                    "color Cin" : baseColorMetal,
                                    "string image" : "textures/office.tx"
    })
    ri.Bxdf( "PxrDisney","bxdf", { 
                                  "reference color baseColor" : ["envmap:Cout"],
                                  "color baseColor" : baseColorMetal,
                                  "float metallic": metallic,
                                #   "float roughness": roughnessStick,
                                  "reference float roughness" : ["metal:opacity"],
                                  "float specular" : [0.5]
                                 })
    ri.Cylinder(metal_radius, 0, metal_height, 360)
    ri.AttributeEnd()
    ri.TransformEnd()

    #------------------!metal part!------------------#

    #------------------plastic part------------------#
    # base for bowly shaped part
    baseColorPlastic = color
    
    ri.TransformBegin()
    ri.Translate(0, metal_height, 0)
    ri.TransformBegin()
    ri.AttributeBegin()
    # ri.Rotate(-90, 1, 0, 0)
    disk_radius = 0.466
    ri.Attribute("trace", {
                        "displacements" : [1]
                        })
    ri.Attribute("displacementbound", {
                                       "sphere" : [1],
                                       "coordinatesystem" : ["shader"]
                                      })

    ri.Pattern("PxrOSL","disk", {
                                 "string shader"  : "shaders/disk",
                                 "float repetitions" : [2]
                                })

    ri.Displacement( "shaders/doDisplace", {
                                "reference float disp" : [ "disk:resultF" ],
                                "float atten" : [1]
                                })
    ri.Pattern("PxrBump","plasticBump",{
        "string filename" : "textures/scratch.tx",
        "float scale": 0.003,
        "int invertT" : 0
        })

    ri.Bxdf( "PxrDisney","bxdf", { 
                                  "color baseColor" : baseColorPlastic,
                                  "float clearcoat" : [1],
                                  "float roughness" : [0],
                                  "reference normal bumpNormal" : ["plasticBump:resultN"]
                                 })
    hyperboloid_wrapper(0, metal_radius, disk_radius)
    ri.AttributeEnd()
    ri.TransformEnd()

    # bowly shaped part
    ri.TransformBegin()
    ri.AttributeBegin()
    bowl_radius = 0.47
    ri.Translate(0, -0.05, 0)
    ri.Rotate(-90, 1, 0, 0)
    y_max = 0.433
    y_min = 0.05
    ri.Attribute("trace", {
                           "displacements" : [1]
                          })
    ri.Attribute("displacementbound", {
                                       "sphere" : [1],
                                       "coordinatesystem" : ["shader"]
                                      })

    ri.Pattern("PxrOSL","wave", {
                                 "string shader"  : "shaders/wave",
                                 "float repetitions" : [2],
                                 "float height" : [0.005]
                                })

    ri.Displacement( "shaders/doDisplace", {
                                    "reference float disp" : [ "wave:resultF" ],
                                    "float atten" : [1]
                                   })
    ri.Pattern("PxrBump","plasticBump",{
                                        "string filename" : "textures/scratch.tx",
                                        "float scale": 0.003,
                                        "int invertT" : 0
                                       })
    
    ri.Bxdf( "PxrDisney","bxdf", { 
                                  "color baseColor" : baseColorPlastic,
                                  "reference normal bumpNormal" : ["plasticBump:resultN"],
                                  "float clearcoat" : [1],
                                  "float specular" : [1],
                                  "float roughness" : [0]
                                 })
    ri.Sphere(bowl_radius, y_min, y_max, 360)
    ri.AttributeEnd()
    ri.TransformEnd()

    # plastic main body
    ri.TransformBegin()
    ri.Translate(0, y_max - y_min - 0.05, 0)
    ri.AttributeBegin()
    body_height = 0.7
    body_br = 0.2
    body_tr = 0.15
    ri.Attribute("trace", {
                           "displacements" : [1]
                          })
    ri.Attribute("displacementbound", {
                                       "sphere" : [1],
                                       "coordinatesystem" : ["shader"]
                                      })

    ri.Pattern("PxrOSL","wave", {
                                 "string shader"  : "shaders/wave",
                                 "int direction" : [1] 
                                })

    ri.Displacement( "shaders/doDisplace", {
                                    "reference float disp" : [ "wave:resultF" ],
                                    "float atten" : [1]
                                   })
    ri.Pattern("PxrBump","plasticBump",{
                                    "string filename" : "textures/scratch.tx",
                                    "float scale": 0.0005,
                                    "int invertT" : 0
                                    })
    ri.Bxdf( "PxrDisney","bxdf", { 
                                  "color baseColor" : baseColorPlastic,
                                  "reference normal bumpNormal" : ["plasticBump:resultN"],
                                  "float clearcoat" : [1],
                                  "float roughness" : [0]
                                 })
    hyperboloid_wrapper(body_height, body_br, body_tr)
    ri.AttributeEnd()

    # top base (tb)
    ri.TransformBegin()
    ri.Translate(0, body_height, 0)
    ri.AttributeBegin()
    tb_height = 0.08
    tb_tr = 0.375
    ri.Attribute("trace", {
                        "displacements" : [1]
                        })
    ri.Attribute("displacementbound", {
                                       "sphere" : [1],
                                       "coordinatesystem" : ["shader"]
                                      })

    ri.Pattern("PxrOSL","wave", {
                                 "string shader"  : "shaders/wave",
                                 "int direction" : [1]
                                })

    ri.Displacement( "shaders/doDisplace", {
                                    "reference float disp" : [ "wave:resultF" ],
                                    "float atten" : [1]
                                   })
    ri.Bxdf( "PxrDisney","bxdf", { 
                                  "color baseColor" : baseColorPlastic,
                                  "float clearcoat" : [1],
                                  "float roughness" : [0]
                                 })
    hyperboloid_wrapper(tb_height, body_tr, tb_tr)
    ri.AttributeEnd()

    # top top (tt)
    ri.TransformBegin()
    ri.AttributeBegin()
    ri.Translate(0, tb_height, 0)
    tt_tr = 0.35
    ri.Attribute("trace", {
                        "displacements" : [1]
                        })
    ri.Attribute("displacementbound", {
                                       "sphere" : [1],
                                       "coordinatesystem" : ["shader"]
                                      })

    ri.Pattern("PxrOSL","wave", {
                                 "string shader"  : "shaders/wave",
                                 "float repetitions" : [2],
                                 "float height" : [0.003],
                                 "int direction" : [0]
                                })

    ri.Displacement( "shaders/doDisplace", {
                                    "reference float disp" : [ "wave:resultF" ],
                                    "float atten" : [1]
                                   })
    ri.Pattern("PxrBump","plasticBump",{
                                "string filename" : "textures/scratch.tx",
                                "float scale": 0.003,
                                "int invertT" : 0
                            })
    ri.Bxdf( "PxrDisney","bxdf", { 
                                  "color baseColor" : baseColorPlastic,
                                  "reference normal bumpNormal" : ["plasticBump:resultN"],
                                  "float clearcoat" : [1],
                                  "float roughness" : [0]
                                 })
    hyperboloid_wrapper(tb_height, tb_tr-0.0005, tt_tr)
    ri.AttributeEnd()

    # top cup (tc)
    ri.TransformBegin()
    ri.AttributeBegin()
    ri.Translate(0, 2*tb_height, 0)
    ri.Rotate(-90, 1, 0, 0)
    tc_radius = tt_tr
    ri.Attribute("trace", {
                        "displacements" : [1]
                        })
    ri.Attribute("displacementbound", {
                                       "sphere" : [1],
                                       "coordinatesystem" : ["shader"]
                                      })

    ri.Pattern("PxrOSL","topdisk", {
                                 "string shader"  : "shaders/topdisk" 
                                })

    ri.Displacement( "shaders/doDisplace", {
                                    "reference float disp" : [ "topdisk:resultF" ],
                                    "float atten" : [1]
                                   })
    ri.Bxdf( "PxrDisney","bxdf", { 
                                  "color baseColor" : baseColorPlastic,
                                  "float clearcoat" : [1],
                                  "float roughness" : [0]
                                 })
    ri.Disk(0, tc_radius + 0.01, 360)
    ri.AttributeEnd()

    ri.TransformEnd()
    ri.TransformEnd()
    ri.TransformEnd()
    ri.TransformEnd()
    ri.TransformEnd()
    ri.TransformEnd()
    #-----------------!plastic part!-----------------#

    ri.ArchiveRecord(ri.COMMENT, '--!End of Pin Function!--')

def Table():
    ri.ArchiveRecord(ri.COMMENT, '--Table Model Generated by Table Function--')
    ri.AttributeBegin()
    # ri.ShadingRate(8)
    # ri.ShadingRate(20)
    face = [12, 0, 12, 12, 0, -12, -12, 0, 12, -12, 0, -12]
    ri.Attribute("trace", {
                        "displacements" : [1]
                        })
    ri.Attribute("displacementbound", {
                                       "sphere" : [1],
                                       "coordinatesystem" : ["shader"]
                                      })
    ri.Pattern("PxrOSL","paper", {
                                 "string shader"  : "shaders/paper"
                                })
    ri.Displacement( "shaders/doDisplace", {
                                "reference float disp" : [ "paper:resultF" ],
                                "float atten" : [1]
                                })

    ri.Pattern("PxrTexture", "myTexture", {"string filename" : ["textures/ink_paper.tx"],
                                           "int invertT" : [ 0 ]
                                          })

    ri.Bxdf( "PxrDisney","bxdf", {
                                  "reference color baseColor" : ["myTexture:resultRGB"],
                                  "float roughness" : [0.5],
                                  "float specular" : [0.1]
                                 })
    ri.Patch("bilinear",{'P':face})
    ri.AttributeEnd()
    ri.ArchiveRecord(ri.COMMENT, '--!End of Table Function!--')

###-------------------------End of Function Section-------------------------###
# check and compile shaders
checkAndCompileShader('wave')
checkAndCompileShader('disk')
checkAndCompileShader('topdisk')
checkAndCompileShader('paper')
checkAndCompileShader('envmap')
checkAndCompileOldShader('doDisplace')

# create an instance for the RenderMan interface
ri = prman.Ri()

# make the generated RIB file nicely indented
ri.Option("rib", {"string asciistyle": "indented"})
# ri.Option( "bucket" ,{"string order" : ["spiral"]})

filename = "scene.rib"
# begin of RIB archive
ri.Begin(filename)

ri.ArchiveRecord(ri.COMMENT, 'File ' +filename)
ri.ArchiveRecord(ri.COMMENT, "Created by " + getpass.getuser())
ri.ArchiveRecord(ri.COMMENT, "Creation Date: " +time.ctime(time.time()))


# TO FRAME BUFFER
ri.Display("scene.exr", "it", "rgba")
ri.Format(1280,720,1)

#Fix the sampling to 720 to reduce noise, put pixel variance low for better look. 
ri.Hider("raytrace" ,{"int incremental" :[1], "int maxsamples" : 512, "int minsamples" : 256 })
ri.PixelVariance (0.01)
ri.ShadingRate(10)
# ri.Exposure(1, 2.2)

#Use default to model, makes it easier.
# ri.Integrator ("PxrDefault" , "integrator")

#Path tracer for final lighting and shading.
ri.Integrator ("PxrVCM" ,"integrator")
ri.Integrator ("PxrDirectLighting" ,"integrator") 
ri.Integrator ("PxrPathTracer" ,"integrator")

# now set the projection to perspective
ri.Projection(ri.PERSPECTIVE,{ri.FOV:30} )

#Move our camera into place.
ri.Rotate(-30,1,0,0)
ri.Translate(0,-4,5)

# camera settings
# fstop, focallength, focaldistance

ri.DepthOfField(5.6, 0.9, 6.8)

# Begin The World
ri.WorldBegin()

#-------------------Lights--------------------
#Add a few lights to brighten up the scene. 
ri.AttributeBegin()
ri.Declare("areaLight" ,"string")
ri.AreaLightSource( "PxrStdAreaLight", {ri.HANDLEID:"areaLight", 
                                        "float exposure" : [9.5],
                                        # "float enableTemperature" : [1],
                                        # "float temperature" : [6700]
                                       })

# ri.AttributeBegin()
# ri.Rotate(45,0,1,0)
# ri.Declare("envLight" ,"string")
# ri.AreaLightSource( "PxrStdEnvMapLight", {ri.HANDLEID:"envLight", 
#                                           "float exposure" : [0.5],
#                                         #   "float enableTemperature" : [1],
#                                         #   "float temperature" : [6500],
#                                           "string rman__EnvMap" : ["office.tx"]
#                                         })
# # lightTx=Transformation()
# # lightTx.setPosition(1,0,1)
# # lightTx.setScale(1,1,1)
# # ri.ConcatTransform(lightTx.getMatrix())
# ri.Geometry('envsphere')
# ri.AttributeEnd()

ri.Bxdf( "PxrDisney","bxdf", { 
                        "color emitColor" : [ 1,1,1]
                        })
#Light 1 (South West)
ri.TransformBegin()
ri.Translate(10, 8,4)
ri.Scale(4,4,4)
ri.Geometry("spherelight")
ri.TransformEnd()
#Light 2 (North East)
ri.TransformBegin()
ri.Translate(-10, 8,4)
ri.Scale(4,4,4)
ri.Geometry("spherelight")
ri.TransformEnd()
ri.TransformBegin()
#Light 3 (South East)
ri.Translate(10,8,-8)
ri.Scale(4,4,4)
ri.Geometry("spherelight")
ri.TransformEnd()
ri.AttributeEnd()
#-------------------!Lights--------------------

# the room
Room(20, 20, 25)

# the groundplane
ri.TransformBegin()
ri.Rotate(-90, 0, 1, 0)
Table()
ri.TransformEnd()

# create and move the pins
ri.TransformBegin()
ri.Translate(0.1, 0, -0.2)
ri.Rotate(-10, 0, 1, 0)

# first pin
ri.TransformBegin()
# ri.Scale(5, 5, 5)
ri.Translate(-1.2, 0.6, 0.7)
ri.Rotate(-96, 0, 0, 1)
ri.Rotate(30, 1, 0, 0)
ri.Rotate(-20, 0, 1, 0)
Pin([0.2,0.2,0.8])
ri.TransformEnd()

# second pin
ri.TransformBegin()
ri.Translate(0.7, 1.72, 0.98)
ri.Rotate(156, 0, 0, 1)
ri.Rotate(50, 1, 0, 0)
Pin([0.9, 0.2, 0.2])
ri.TransformEnd()

ri.TransformEnd()

# ri.TransformBegin()
# ri.Translate(0, 3, -1)
# ri.Rotate(-10, 1 ,0, 0)
# ri.Rotate(180, 1,0, 0)
# Pin([0.2,0.2,0.8])
# ri.TransformEnd()

# end of the world
ri.WorldEnd()

# end of rib file
ri.End()
